/**
 * Dashboard Home Page Component
 * Comprehensive dashboard overview with metrics, activity, and quick actions
 */

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  TrendingUp,
  TrendingDown,
  Users,
  Bot,
  Zap,
  DollarSign,
  Clock,
  CheckCircle,
  AlertTriangle,
  Activity,
  BarChart3,
  MessageSquare,
  Star,
  Plus,
  ArrowRight,
  Eye,
  Settings,
  Download,
  Filter,
  Calendar,
  Target,
  Workflow,
  Brain,
  Sparkles,
  PlayCircle,
  PauseCircle,
  RotateCcw,
  AlertCircle,
  Globe,
  Shield,
  Cpu,
  Database,
  Cloud,
  Rocket
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { LineChart, Line, AreaChart, Area, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';

// Types
interface DashboardMetric {
  id: string;
  title: string;
  value: string | number;
  change: number;
  changeType: 'increase' | 'decrease' | 'neutral';
  icon: React.ElementType;
  description?: string;
  color: string;
}

interface ActivityItem {
  id: string;
  type: 'hire' | 'task' | 'workflow' | 'integration' | 'alert';
  title: string;
  description: string;
  timestamp: Date;
  status: 'success' | 'warning' | 'error' | 'info';
  actor: string;
  target?: string;
}

interface AIEmployee {
  id: string;
  name: string;
  role: string;
  avatar: string;
  status: 'active' | 'busy' | 'offline' | 'maintenance';
  productivity: number;
  tasksCompleted: number;
  rating: number;
  cost: number;
  capabilities: string[];
}

interface QuickAction {
  id: string;
  title: string;
  description: string;
  icon: React.ElementType;
  color: string;
  action: () => void;
  badge?: string;
}

// Mock data
const dashboardMetrics: DashboardMetric[] = [
  {
    id: 'total-employees',
    title: 'AI Employees',
    value: 24,
    change: 12.5,
    changeType: 'increase',
    icon: Bot,
    description: 'Active AI workforce',
    color: 'blue'
  },
  {
    id: 'tasks-completed',
    title: 'Tasks Completed',
    value: '1,247',
    change: 23.1,
    changeType: 'increase',
    icon: CheckCircle,
    description: 'This month',
    color: 'green'
  },
  {
    id: 'cost-savings',
    title: 'Cost Savings',
    value: '$12,450',
    change: 8.7,
    changeType: 'increase',
    icon: DollarSign,
    description: 'vs traditional workforce',
    color: 'emerald'
  },
  {
    id: 'avg-response',
    title: 'Avg Response Time',
    value: '2.3s',
    change: -15.2,
    changeType: 'decrease',
    icon: Clock,
    description: 'Faster than last month',
    color: 'purple'
  }
];

const recentActivity: ActivityItem[] = [
  {
    id: '1',
    type: 'hire',
    title: 'New AI Employee Hired',
    description: 'Sarah Chen (Data Analyst) joined your workforce',
    timestamp: new Date(Date.now() - 5 * 60 * 1000),
    status: 'success',
    actor: 'John Doe'
  },
  {
    id: '2',
    type: 'task',
    title: 'Complex Analysis Completed',
    description: 'Market research report generated by Marcus Rodriguez',
    timestamp: new Date(Date.now() - 15 * 60 * 1000),
    status: 'success',
    actor: 'Marcus Rodriguez',
    target: 'Q4 Market Analysis'
  },
  {
    id: '3',
    type: 'workflow',
    title: 'Automation Workflow Started',
    description: 'Daily report generation workflow initiated',
    timestamp: new Date(Date.now() - 30 * 60 * 1000),
    status: 'info',
    actor: 'System'
  },
  {
    id: '4',
    type: 'alert',
    title: 'High API Usage Detected',
    description: 'Consider upgrading plan for better performance',
    timestamp: new Date(Date.now() - 45 * 60 * 1000),
    status: 'warning',
    actor: 'System'
  },
  {
    id: '5',
    type: 'integration',
    title: 'Slack Integration Connected',
    description: 'Your team can now interact with AI employees via Slack',
    timestamp: new Date(Date.now() - 60 * 60 * 1000),
    status: 'success',
    actor: 'John Doe'
  }
];

const topEmployees: AIEmployee[] = [
  {
    id: '1',
    name: 'Sarah Chen',
    role: 'Data Analyst',
    avatar: '👩‍💼',
    status: 'active',
    productivity: 94,
    tasksCompleted: 156,
    rating: 4.9,
    cost: 120,
    capabilities: ['Python', 'SQL', 'Analytics']
  },
  {
    id: '2',
    name: 'Marcus Rodriguez',
    role: 'Software Engineer',
    avatar: '👨‍💻',
    status: 'busy',
    productivity: 91,
    tasksCompleted: 143,
    rating: 4.8,
    cost: 150,
    capabilities: ['React', 'Node.js', 'API Design']
  },
  {
    id: '3',
    name: 'Alex Thompson',
    role: 'Marketing Specialist',
    avatar: '🎯',
    status: 'active',
    productivity: 88,
    tasksCompleted: 132,
    rating: 4.7,
    cost: 110,
    capabilities: ['Content', 'SEO', 'Strategy']
  },
  {
    id: '4',
    name: 'Emma Wilson',
    role: 'Designer',
    avatar: '🎨',
    status: 'active',
    productivity: 85,
    tasksCompleted: 98,
    rating: 4.6,
    cost: 130,
    capabilities: ['UI/UX', 'Figma', 'Branding']
  }
];

const chartData = [
  { name: 'Jan', tasks: 420, cost: 2400, employees: 8 },
  { name: 'Feb', tasks: 580, cost: 2100, employees: 12 },
  { name: 'Mar', tasks: 720, cost: 1800, employees: 16 },
  { name: 'Apr', tasks: 890, cost: 1600, employees: 20 },
  { name: 'May', tasks: 1120, cost: 1400, employees: 24 },
  { name: 'Jun', tasks: 1247, cost: 1200, employees: 24 }
];

const pieData = [
  { name: 'Data Analysis', value: 35, color: '#3B82F6' },
  { name: 'Software Development', value: 25, color: '#10B981' },
  { name: 'Content Creation', value: 20, color: '#F59E0B' },
  { name: 'Customer Support', value: 12, color: '#EF4444' },
  { name: 'Other', value: 8, color: '#8B5CF6' }
];

interface DashboardHomePageProps {
  className?: string;
  onNavigate?: (path: string) => void;
  onHireEmployee?: () => void;
  onCreateWorkflow?: () => void;
  onViewAnalytics?: () => void;
  onOpenChat?: () => void;
}

export const DashboardHomePage: React.FC<DashboardHomePageProps> = ({
  className,
  onNavigate,
  onHireEmployee,
  onCreateWorkflow,
  onViewAnalytics,
  onOpenChat
}) => {
  const [timeRange, setTimeRange] = useState('7d');
  const [selectedMetric, setSelectedMetric] = useState('tasks');

  const quickActions: QuickAction[] = [
    {
      id: 'hire',
      title: 'Hire AI Employee',
      description: 'Add new talent to your workforce',
      icon: Plus,
      color: 'blue',
      action: () => onHireEmployee?.(),
      badge: 'Popular'
    },
    {
      id: 'chat',
      title: 'Start Chat',
      description: 'Communicate with your AI workforce',
      icon: MessageSquare,
      color: 'green',
      action: () => onOpenChat?.()
    },
    {
      id: 'workflow',
      title: 'Create Workflow',
      description: 'Automate your business processes',
      icon: Workflow,
      color: 'purple',
      action: () => onCreateWorkflow?.()
    },
    {
      id: 'analytics',
      title: 'View Analytics',
      description: 'Analyze workforce performance',
      icon: BarChart3,
      color: 'orange',
      action: () => onViewAnalytics?.()
    }
  ];

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'success': return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'warning': return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
      case 'error': return <AlertCircle className="h-4 w-4 text-red-500" />;
      default: return <Activity className="h-4 w-4 text-blue-500" />;
    }
  };

  const getEmployeeStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-500';
      case 'busy': return 'bg-yellow-500';
      case 'offline': return 'bg-gray-400';
      case 'maintenance': return 'bg-red-500';
      default: return 'bg-gray-400';
    }
  };

  return (
    <div className={cn("space-y-6 p-6", className)}>
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
            Dashboard
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-1">
            Welcome back! Here's what's happening with your AI workforce.
          </p>
        </div>
        
        <div className="flex items-center gap-3">
          <Button variant="outline" size="sm" className="gap-2">
            <Calendar className="h-4 w-4" />
            Last 7 days
          </Button>
          <Button variant="outline" size="sm" className="gap-2">
            <Download className="h-4 w-4" />
            Export
          </Button>
          <Button variant="outline" size="sm">
            <Settings className="h-4 w-4" />
          </Button>
        </div>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {dashboardMetrics.map((metric) => {
          const Icon = metric.icon;
          return (
            <Card key={metric.id} className="hover:shadow-lg transition-shadow">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className={cn(
                      "p-2 rounded-lg",
                      metric.color === 'blue' && "bg-blue-100 dark:bg-blue-900/20",
                      metric.color === 'green' && "bg-green-100 dark:bg-green-900/20",
                      metric.color === 'emerald' && "bg-emerald-100 dark:bg-emerald-900/20",
                      metric.color === 'purple' && "bg-purple-100 dark:bg-purple-900/20"
                    )}>
                      <Icon className={cn(
                        "h-5 w-5",
                        metric.color === 'blue' && "text-blue-600 dark:text-blue-400",
                        metric.color === 'green' && "text-green-600 dark:text-green-400",
                        metric.color === 'emerald' && "text-emerald-600 dark:text-emerald-400",
                        metric.color === 'purple' && "text-purple-600 dark:text-purple-400"
                      )} />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
                        {metric.title}
                      </p>
                      <p className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                        {metric.value}
                      </p>
                    </div>
                  </div>
                  
                  <div className="text-right">
                    <div className={cn(
                      "flex items-center gap-1 text-sm font-medium",
                      metric.changeType === 'increase' && "text-green-600",
                      metric.changeType === 'decrease' && "text-red-600",
                      metric.changeType === 'neutral' && "text-gray-600"
                    )}>
                      {metric.changeType === 'increase' ? (
                        <TrendingUp className="h-3 w-3" />
                      ) : metric.changeType === 'decrease' ? (
                        <TrendingDown className="h-3 w-3" />
                      ) : null}
                      {Math.abs(metric.change)}%
                    </div>
                    {metric.description && (
                      <p className="text-xs text-gray-500 mt-1">
                        {metric.description}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* Charts and Activity */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Performance Chart */}
        <Card className="lg:col-span-2">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>Performance Overview</CardTitle>
                <CardDescription>
                  Track your AI workforce metrics over time
                </CardDescription>
              </div>
              <Tabs value={selectedMetric} onValueChange={setSelectedMetric}>
                <TabsList>
                  <TabsTrigger value="tasks" className="text-xs">Tasks</TabsTrigger>
                  <TabsTrigger value="cost" className="text-xs">Cost</TabsTrigger>
                  <TabsTrigger value="employees" className="text-xs">Employees</TabsTrigger>
                </TabsList>
              </Tabs>
            </div>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <AreaChart data={chartData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Area
                  type="monotone"
                  dataKey={selectedMetric}
                  stroke="#3B82F6"
                  fill="#3B82F6"
                  fillOpacity={0.1}
                />
              </AreaChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        {/* Quick Actions */}
        <Card>
          <CardHeader>
            <CardTitle>Quick Actions</CardTitle>
            <CardDescription>
              Get things done faster
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            {quickActions.map((action) => {
              const Icon = action.icon;
              return (
                <Button
                  key={action.id}
                  variant="ghost"
                  onClick={action.action}
                  className="w-full justify-start p-3 h-auto hover:bg-gray-50 dark:hover:bg-gray-800"
                >
                  <div className="flex items-center gap-3 w-full">
                    <div className={cn(
                      "p-2 rounded-lg",
                      action.color === 'blue' && "bg-blue-100 dark:bg-blue-900/20",
                      action.color === 'green' && "bg-green-100 dark:bg-green-900/20",
                      action.color === 'purple' && "bg-purple-100 dark:bg-purple-900/20",
                      action.color === 'orange' && "bg-orange-100 dark:bg-orange-900/20"
                    )}>
                      <Icon className={cn(
                        "h-4 w-4",
                        action.color === 'blue' && "text-blue-600 dark:text-blue-400",
                        action.color === 'green' && "text-green-600 dark:text-green-400",
                        action.color === 'purple' && "text-purple-600 dark:text-purple-400",
                        action.color === 'orange' && "text-orange-600 dark:text-orange-400"
                      )} />
                    </div>
                    <div className="flex-1 text-left">
                      <div className="flex items-center gap-2">
                        <span className="font-medium">{action.title}</span>
                        {action.badge && (
                          <Badge variant="secondary" className="text-xs">
                            {action.badge}
                          </Badge>
                        )}
                      </div>
                      <p className="text-sm text-gray-500">{action.description}</p>
                    </div>
                    <ArrowRight className="h-4 w-4 text-gray-400" />
                  </div>
                </Button>
              );
            })}
          </CardContent>
        </Card>
      </div>

      {/* Employee Performance and Activity */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Top Performing Employees */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>Top Performers</CardTitle>
                <CardDescription>
                  Your most productive AI employees
                </CardDescription>
              </div>
              <Button variant="outline" size="sm" onClick={() => onNavigate?.('/workforce')}>
                View All
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {topEmployees.map((employee, index) => (
                <div key={employee.id} className="flex items-center gap-3 p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors">
                  <div className="flex items-center gap-3 flex-1">
                    <div className="relative">
                      <span className="text-2xl">{employee.avatar}</span>
                      <div className={cn(
                        "absolute -bottom-1 -right-1 w-3 h-3 rounded-full border-2 border-white dark:border-gray-900",
                        getEmployeeStatusColor(employee.status)
                      )} />
                    </div>
                    
                    <div className="flex-1">
                      <div className="flex items-center gap-2">
                        <span className="font-medium">{employee.name}</span>
                        <div className="flex items-center gap-1">
                          <Star className="h-3 w-3 text-yellow-500 fill-current" />
                          <span className="text-xs text-gray-600">{employee.rating}</span>
                        </div>
                      </div>
                      <p className="text-sm text-gray-500">{employee.role}</p>
                      <div className="flex gap-1 mt-1">
                        {employee.capabilities.slice(0, 2).map((cap) => (
                          <Badge key={cap} variant="secondary" className="text-xs">
                            {cap}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </div>
                  
                  <div className="text-right">
                    <div className="text-sm font-medium">{employee.productivity}%</div>
                    <div className="text-xs text-gray-500">{employee.tasksCompleted} tasks</div>
                    <Progress value={employee.productivity} className="w-16 h-1 mt-1" />
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Recent Activity */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>Recent Activity</CardTitle>
                <CardDescription>
                  Latest updates from your AI workforce
                </CardDescription>
              </div>
              <Button variant="outline" size="sm">
                <Eye className="h-4 w-4" />
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-80">
              <div className="space-y-4">
                {recentActivity.map((activity) => (
                  <div key={activity.id} className="flex gap-3">
                    <div className="flex-shrink-0 mt-1">
                      {getStatusIcon(activity.status)}
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900 dark:text-gray-100">
                        {activity.title}
                      </p>
                      <p className="text-sm text-gray-600 dark:text-gray-400">
                        {activity.description}
                      </p>
                      <div className="flex items-center gap-2 mt-1">
                        <span className="text-xs text-gray-500">
                          {activity.timestamp.toLocaleTimeString()}
                        </span>
                        <span className="text-xs text-gray-400">•</span>
                        <span className="text-xs text-gray-500">
                          by {activity.actor}
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </ScrollArea>
          </CardContent>
        </Card>
      </div>

      {/* Workforce Distribution and System Status */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Workforce Distribution */}
        <Card>
          <CardHeader>
            <CardTitle>Workforce Distribution</CardTitle>
            <CardDescription>
              AI employees by specialization
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-center">
              <ResponsiveContainer width="100%" height={200}>
                <PieChart>
                  <Pie
                    data={pieData}
                    cx="50%"
                    cy="50%"
                    innerRadius={60}
                    outerRadius={80}
                    paddingAngle={5}
                    dataKey="value"
                  >
                    {pieData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>
            <div className="grid grid-cols-2 gap-2 mt-4">
              {pieData.map((item) => (
                <div key={item.name} className="flex items-center gap-2">
                  <div
                    className="w-3 h-3 rounded-full"
                    style={{ backgroundColor: item.color }}
                  />
                  <span className="text-sm text-gray-600 dark:text-gray-400">
                    {item.name}
                  </span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* System Status */}
        <Card>
          <CardHeader>
            <CardTitle>System Status</CardTitle>
            <CardDescription>
              Platform health and performance
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Globe className="h-4 w-4 text-green-500" />
                <span className="text-sm">API Status</span>
              </div>
              <Badge variant="secondary" className="bg-green-100 text-green-800 dark:bg-green-900/20">
                Operational
              </Badge>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Cpu className="h-4 w-4 text-blue-500" />
                <span className="text-sm">Processing Power</span>
              </div>
              <div className="flex items-center gap-2">
                <Progress value={75} className="w-20 h-2" />
                <span className="text-xs text-gray-500">75%</span>
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Database className="h-4 w-4 text-purple-500" />
                <span className="text-sm">Database</span>
              </div>
              <Badge variant="secondary" className="bg-green-100 text-green-800 dark:bg-green-900/20">
                Healthy
              </Badge>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Cloud className="h-4 w-4 text-orange-500" />
                <span className="text-sm">Cloud Storage</span>
              </div>
              <div className="flex items-center gap-2">
                <Progress value={45} className="w-20 h-2" />
                <span className="text-xs text-gray-500">45%</span>
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Shield className="h-4 w-4 text-green-500" />
                <span className="text-sm">Security</span>
              </div>
              <Badge variant="secondary" className="bg-green-100 text-green-800 dark:bg-green-900/20">
                Secure
              </Badge>
            </div>

            <div className="pt-2 border-t">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">Uptime</span>
                <span className="text-sm text-green-600">99.98%</span>
              </div>
              <div className="flex items-center justify-between mt-1">
                <span className="text-sm font-medium">Response Time</span>
                <span className="text-sm text-blue-600">2.3ms</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default DashboardHomePage;